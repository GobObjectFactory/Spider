- prefer composite moves that create a free cell, particularly after a deal
- prefer last resort moves that lead to a discard
- optimize scoring factors using designed experiments
- make console access threadsafe
- before playing onto a free cell search for a free cell preserving sequence

- improve scoring of offload moves
- consider enumerating all offload moves instead of one per pile
- match suit and face for offload moves
- convert lower stack into yet another root
- permit inner run to be the offload
- count homeless runs allowing them as long as free cells permit
- no homeless at the end makes an emptying move
- no homeless anywhere else makes a free-cell preserving move
- one homeless at the end makes a free-cell perserving move
- use SupplementaryMoves instead of local list moves

- convert last resort scoring to new model

- add basic unit tests
- add holding unit tests

- inverted offload moves don't need to move the entire lower run to a free cell if the suits match
- offload moves no longer need the offload pile or offload index information

- prefer long exposed runs even if it means splitting a run

- figure out why simple consistently gets better results than complex
- theory: prefer to have a single run on a free cell
- calculate oneRunDelta correctly for swaps
- check whether moves with oneRunDelta > 0 are rejected

- alternate Nelder-Mead implementation:
  http://www.koders.com/csharp/fid218B2E3946027CB5037676EA50CE549B6FC26CF7.aspx?s=mdef:search

Four-suit coefficients (before oneRunDelta):

Coefficients = new double[] {
    /* 0 */ 9.137560762, 44.11268861, 934.6355127, -0.1107699821, -3.227980575, -0.1357842696,
    /* 6 */ 1.830162252, 0.00665765693, -0.2034103221, -0.7819596996,
};

spider --games 1 --seed 39983 --simple --suits 4
spider: seed: 39983, message: maximum moves exceeded
