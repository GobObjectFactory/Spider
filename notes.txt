- prefer last resort moves that lead to a discard
- optimize scoring factors using designed experiments
- before playing onto a free cell search for a free cell preserving sequence

- prefer holding moves that match suit

- retest complex 
- swaps could use holding piles from to the to pile
- also consider moving the offload back onto the from pile
- convert holding list to use supplementary list instead
- improve scoring of offload moves
- consider enumerating all offload moves instead of one per pile
- for offload consider trying to find homes for homeless runs by uncovering targets

- inverted offload moves don't need to move the entire lower run to a free cell if the suits match

- prefer long exposed runs even if it means splitting a run

- figure out why simple consistently gets better results than complex
- theory: prefer to have a single run on a free cell
- calculate oneRunDelta correctly for swaps
- check whether moves with oneRunDelta > 0 are rejected

- alternate Nelder-Mead implementation:
  http://www.koders.com/csharp/fid218B2E3946027CB5037676EA50CE549B6FC26CF7.aspx?s=mdef:search




spider --games 1 --seed 39983 --simple --suits 4
spider: seed: 39983, message: maximum moves exceeded
